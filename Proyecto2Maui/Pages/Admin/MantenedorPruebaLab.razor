@page "/mantenedorPruebaLab"
@using BlazorStrap;
@using DTOs;
@inject IPruebaLabService pruebaLabService
@inject SweetAlertService Swal
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="row d-flex justify-content-center">
        <div class="col-sm-12 col-md-12 col-lg-10 col-xl-10 bg-white mt-3"
             style="border-radius: 20px">
            <div>
                <div>
                    <h5 class="text-center text-uppercase mt-2"
                        style="
                                    font-family: 'Courier New', Courier,
                                        monospace;
                                    font-weight: 600;
                                ">
                        Configuración de pruebas de Laboratorio
                    </h5>
                </div>
                <div class="container">
                    <div class="row d-flex justify-content-start">
                        <div class="d-flex col-sm-12 col-md-6 col-lg-6 col-xl-6 mt-3 mb-3">
                            <div>
                                <label class="mt-1 mx-1"
                                       for="nombrePrueba">
                                    <strong>Nombre (prueba)</strong>
                                </label>
                            </div>
                            <div>
                                <BSInput InputType="InputType.Text" placeholder="Busqueda" ValueChanged="async (string e) => await BuscarPruebaLab(e)" UpdateOnInput="true" Value="Busqueda" />
                            </div>

                        </div>
                    </div>
                </div>

                <div class="table-responsive text-nowrap">
                    <table class="table table-fixed mx-auto"
                           style="
                                display: block;
                                min-height: 400px;
                                height: 400px;
                                overflow-y: auto;
                                scrollbar-gutter: stable both-edges;
                            ">

                        <thead>
                            <tr class="text-center">
                                <th scope="col">Opciones</th>
                                <th scope="col">Nombre Prueba</th>
                                <th scope="col">Descripción</th>
                                <th scope="col">Precio</th>
                                <th scope="col">Fecha Registro</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (pruebasLaboratorio.Count() > 0)
                            {
                                @foreach (var item in pruebasLaboratorio)
                                {
                                    @if (!string.IsNullOrEmpty(Busqueda))
                                    {
                                        @if (item.NombrePrueba != Busqueda)
                                        {
                                            if (!(item.NombrePrueba.Contains(Busqueda)))
                                            {
                                                continue;
                                            }

                                        }
                                    }
                                   
                                    <tr>

                                        <td>
                                            <input class="btn btn-primary btn-sm mx-1 mt-1"
                                                   style="
                                                padding: 0.2rem 0.4rem;
                                                font-size: 0.7rem;
                                            "
                                                   type="button"
                                                   value="Editar"
                                                   data-bs-toggle="modal"
                                                   data-bs-target="#editarPrueba"
                                                   data-bs-whatever=""
                                            @onclick="() => SeleccionarPruebaEdicion(item.idPruebaLab.ToString())" />

                                            <input class="btn btn-danger btn-sm mx-1 mt-1"
                                                   style="
                                                padding: 0.2rem 0.4rem;
                                                font-size: 0.7rem;
                                            "
                                                   type="button"
                                                   value="Eliminar"
                                            @onclick="() => EliminarPruebaLab(item.idPruebaLab.ToString())" />
                                        </td>
                                        <td>@item.NombrePrueba</td>
                                        <td>@item.Descripcion</td>
                                        <td class="text-success">$@item.Precio</td>
                                        <td>10/11/2023</td>
                                    </tr>
                                }

                            }else
                            {
                                <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                                    <span class="visually-hidden">Cargando...</span>
                                </div>
                                <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
                                    <span class="visually-hidden">Cargando...</span>
                                </div>
                            }


                        </tbody>
                    </table>
                </div>

            </div>
            <div class="d-flex justify-content-end mb-2">
                <input class="btn btn-success btn-sm mt-1 mb-1"
                       type="button"
                       value="Registrar Prueba"
                       data-bs-toggle="modal"
                       data-bs-target="#registrarPrueba"
                       data-bs-whatever="" />
            </div>
        </div>
    </div>
</div>

<div class="modal fade"
     id="registrarPrueba"
     tabindex="-1"
     aria-labelledby="exampleModalLabel"
     aria-hidden="true"
     >
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">
                    Nueva Prueba de Laboratorio
                </h5>
                <button type="button"
                        class="btn-close"
                        data-bs-dismiss="modal"
                        aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="creacionPuebaLab" OnValidSubmit="CrearPruebaLab">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="prueba-nombre"
                               class="col-form-label">
                            Nombre prueba:
                        </label>
                        <input type="text"
                        @bind-value="creacionPuebaLab.nombrePrueba"
                               class="form-control form-control-sm"
                               id="prueba-nombre"
                                />
                        <ValidationMessage For=@( () => creacionPuebaLab.nombrePrueba ) />
                    </div>
                    <div class="mb-3">
                        <label for="prueba-precio"
                               class="col-form-label">Precio:</label>
                        <input type="text"
                        @bind-value="creacionPuebaLab.precio"
                               class="form-control form-control-sm"
                               id="prueba-precio"
                                />
                    </div>
                    <div class="mb-3">
                        <label for="prueba-descripcion"
                               class="col-form-label">Descripción:</label>
                        <textarea class="form-control form-control-sm" @bind="creacionPuebaLab.descripcion" id="prueba-descripcion"></textarea>
                        <ValidationMessage For=@( () => creacionPuebaLab.descripcion ) />
                    </div>

                    <div class="modal-footer">
                        <button type="button"
                                class="btn btn-danger"
                                data-bs-dismiss="modal">
                            Cerrar
                        </button>
                        <button type="submit" class="btn btn-success" >
                            Crear prueba
                        </button>
                    </div>
                </EditForm>
            </div>

        </div>
    </div>
</div>



<div class="modal fade"
     id="editarPrueba"
     tabindex="-1"
     aria-labelledby="exampleModalLabel"
     aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">
                    Editar Prueba de Laboratorio
                </h5>
                <button type="button"
                        class="btn-close"
                        data-bs-dismiss="modal"
                        aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="edicionPruebaLab" OnValidSubmit="EditarPruebaLab">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="prueba-nombre"
                               class="col-form-label">
                            Nombre prueba:
                        </label>
                        <input type="text"
                        @bind-value="edicionPruebaLab.nombrePrueba"
                               class="form-control form-control-sm"
                               id="prueba-nombre"
                               required />
                        <ValidationMessage For=@( () => edicionPruebaLab.nombrePrueba ) />
                    </div>
                    <div class="mb-3">
                        <label for="prueba-precio"
                               class="col-form-label">Precio:</label>
                        <input type="text"
                        @bind-value="edicionPruebaLab.precio"
                               class="form-control form-control-sm"
                               id="prueba-precio"
                               required />
                    </div>
                    <div class="mb-3">
                        <label for="prueba-descripcion"
                               class="col-form-label">Descripción:</label>
                        <textarea class="form-control form-control-sm" @bind="edicionPruebaLab.descripcion" id="prueba-descripcion"></textarea>
                        <ValidationMessage For=@( () => edicionPruebaLab.descripcion ) />
                    </div>

                    <div class="modal-footer">
                        <button type="button"
                                class="btn btn-danger"
                                data-bs-dismiss="modal">
                            Cerrar
                        </button>
                        <button type="submit" class="btn btn-primary">
                            Editar prueba
                        </button>
                    </div>
                </EditForm>
            </div>

        </div>
    </div>
</div>



@* No borrar esta parte, en caso de ser borrada no funcionaran los modals *@
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
        crossorigin="anonymous"></script>


@code {
    EdicionPruebaLabDTO edicionPruebaLab = new();
    CreacionPruebaLabDTO creacionPuebaLab = new();
    List<PruebaLabDTO> pruebasLaboratorio = new();
    string Busqueda = "";

    protected async override Task OnInitializedAsync()
    {
        var pruebaslab = await pruebaLabService.ObtenerPruebas();

        if (pruebaslab.Count() > 0)
        {
            pruebasLaboratorio = pruebaslab.Select(p => new PruebaLabDTO()
                {
                    idPruebaLab = p.idPruebaLab,
                    NombrePrueba = p.nombrePrueba,
                    Descripcion = p.descripcion,
                    Precio = p.precio
                }).ToList();
        }

    }

    private void SeleccionarPruebaEdicion(string idPruebaLab)
    {
        edicionPruebaLab = pruebasLaboratorio.Where(p => p.idPruebaLab.ToString() == idPruebaLab).Select(pl => new EdicionPruebaLabDTO()
            {
                idPruebaLab = pl.idPruebaLab,
                nombrePrueba = pl.NombrePrueba,
                descripcion = pl.Descripcion,
                precio = pl.Precio
            }).FirstOrDefault();
    }


    private async Task EditarPruebaLab()
    {
        var resultado = await pruebaLabService.EditarPruebaLab(edicionPruebaLab);

        if (resultado)
        {
            edicionPruebaLab = new();
            await OnInitializedAsync();

            await Swal.FireAsync(new SweetAlertOptions()
                {
                    Title = "Info",
                    Color = "DarkGreen",
                    Html = $"<strong>Se edito con exito</strong>",
                    Toast = true,
                    Icon = SweetAlertIcon.Success,
                    Timer = 2000
                });
        }

    }
    private async Task CrearPruebaLab()
    {

        var resultado = await pruebaLabService.CrearPruebaLab(creacionPuebaLab);


        if (resultado != null)
        {
            creacionPuebaLab = new();
            await OnInitializedAsync();

            await Swal.FireAsync(new SweetAlertOptions()
                {
                    Title = "Info",
                    Color = "DarkGreen",
                    Html = $"<strong>Se creo con exito</strong>",
                    Toast = true,
                    Icon = SweetAlertIcon.Success,
                    Timer = 2000
                });
        }
    }


    private async Task BuscarPruebaLab(string nombrePrueba)
    {

        Busqueda = nombrePrueba;


    }


    private async  Task EliminarPruebaLab(string idPrueba)
    {

        var confirmacion = await Swal.FireAsync(new SweetAlertOptions()
            {
                Title = "Confirma Eliminar Prueba Laboratorio",
                Html = $"<strong>Seguro que quieres eliminar la prueba de laboratorio?</strong>",
                Footer = """Confirmacion""",
                Icon = SweetAlertIcon.Question,
                ShowConfirmButton = true,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                ConfirmButtonColor = "green",
                CancelButtonText = "No",
                CancelButtonColor = "Red",
                Timer = 10000
            });
        if (confirmacion.IsConfirmed)
        {
           var resultado = await pruebaLabService.eliminarPruebaLab(idPrueba);
            await OnInitializedAsync();

            await Swal.FireAsync(new SweetAlertOptions()
                {
                    Title = "Info",
                    Color = "DarkGreen",
                    Html = $"<strong>Se elimino la prueba de laboratorio con exito</strong>",
                    Toast = true,
                    Icon = SweetAlertIcon.Success,
                    Timer = 2000
                });
        }

    }


}



