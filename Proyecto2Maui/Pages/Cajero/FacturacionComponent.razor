@page "/menuFacturacion"
@using CurrieTechnologies.Razor.SweetAlert2;
@using Proyecto2Maui.Modelos;
@using Proyecto2Maui.Modelos.Request;
@using Proyecto2Maui.Servicios;
@using Proyecto2Maui;

@inject ITurnoServices turnoService
@inject IPruebaLabService pruebaLabService
@inject IReciboService reciboService
@inject SweetAlertService Swal;


<div class="container">
    <div class="row">
        <div class="col-sm-12 col-md-8 col-lg-8 col-xl-8 bg white"
             style="border-radius: 10px">
            <div class="container">
                <div class="row">
                    <div class="col-sm-12 col-md-5 col-lg-5 col-xl-5 bg-white mt-3"
                         style="border-radius: 10px 0 0 10px">
                        <div>
                            <h5 class="text-center mb-3 text-black text-uppercase mt-2"
                                style="
                                            font-family: 'Courier New', Courier,
                                                monospace;
                                            font-weight: 600;
                                        ">
                                DATOS DEL CLIENTE
                            </h5>
                            <div style="min-height: 30px;">
                                @if (!string.IsNullOrEmpty(idTurnoSeleccionado))
                                {
                                    <h4 class="text-center">@idTurnoSeleccionado</h4>
                                }
                            </div>


                            <EditForm Model="cliente" OnValidSubmit="GenerarRecibo">
                                <DataAnnotationsValidator />
                                <div class="form-group">
                                    <div>
                                        <label for="nombre">Nombre</label>
                                    </div>
                                    <div>
                                        <InputText @bind-Value=cliente.nombreCliente class="form-control-sm" id="Name" />
                                        <ValidationMessage For=@( () => cliente.nombreCliente ) />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div>
                                        <label for="apellido">Apellido</label>
                                    </div>
                                    <div>
                                        <InputText @bind-Value=cliente.apellidoCliente class="form-control-sm" id="Name" />
                                        <ValidationMessage For=@( () => cliente.apellidoCliente ) />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div>
                                        <label for="telefono">Teléfono</label>
                                    </div>
                                    <div>
                                        <InputText @bind-Value=cliente.telefono class="form-control-sm" id="Name" />
                                        <ValidationMessage For=@( () => cliente.telefono ) />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div>
                                        <label for="cedula">Cédula</label>
                                    </div>
                                    <div>
                                        <InputText @bind-Value=cliente.cedula class="form-control-sm" id="Name" />
                                        <ValidationMessage For=@( () => cliente.cedula ) />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div>
                                        <label for="email">Email</label>
                                    </div>
                                    <div>
                                        <InputText @bind-Value=cliente.email class="form-control-sm" id="Name" />
                                        <ValidationMessage For=@( () => cliente.email ) />
                                    </div>
                                </div>

                                <div class="d-flex mb-4" style="min-height: 2px; min-width: 5px;">
                                    <input class="btn btn-secondary btn mx-1 mt-1 mb-1"
                                           type="button"
                                           value="Limpiar"
                                           ps-2
                                    @onclick="LimpiarItems" />

                                    <input class="btn btn-success btn mx-1 mt-1 mb-1"
                                           type="submit"
                                           disabled=@estaCargando
                                           value="Generar recibo" />
                                </div>
                            </EditForm>

                            <hr>
                            <h6 class="text-center">
                                Añadir Prueba(s)
                            </h6>


                            <div class="btn-group ">
                                <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuClickableInside" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                                    Pruebas de Laboratorio
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuClickableInside">
                                    @if (PruebasLab.Count > 0)
                                    {
                                        foreach (var item in PruebasLab)
                                        {
                                            <li>
                                                <a class="dropdown-item"
                                                @onclick="() => AgregarItem(id:item.idPruebaLab, nombrePrueba: item.nombrePrueba, precio:item.precio)">
                                                    @item.nombrePrueba
                                                </a>
                                            </li>
                                        }

                                    }
                                    else
                                    {
                                        <li class="spinner-border text-primary" role="status">

                                            <span class="visually-hidden">Loading...</span>

                                        </li>
                                    }
                                </ul>
                            </div>

                        </div>
                    </div>
                    <div class="col-sm-12 col-md-7 col-lg-7 col-xl-7 bg-white mt-3"
                         style="border-radius: 0 10px 10px 0">
                        <h5 class="text-center mb-3 text-black text-uppercase mt-2"
                            style="
                                        font-family: 'Courier New', Courier,
                                            monospace;
                                        font-weight: 600;
                                    ">
                            Seleccion a Facturar
                        </h5>
                        <table class="table"
                               style="
                                        display: block;
                                        height: 500px;
                                        overflow-y: auto;
                                        scrollbar-gutter: stable both-edges;
                                    ">

                            <!-- PRUEBA SELECCIONADA-->
                            @if (PruebasSeleccionadas.Count() > 0)
                            {
                                <thead>
                                    <tr>
                                        <th scope="col">Prueba</th>
                                        <th scope="col">Precio</th>
                                        <th scope="col"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in PruebasSeleccionadas)
                                    {
                                        <tr>
                                            <th scope="row">@item.nombrePrueba</th>
                                            <td>$@item.precio</td>
                                            <td>
                                                <input class="btn btn-outline-danger btn-sm mx-1 mt-1"
                                                       style="
                                                        padding: 0.2rem 0.4rem;
                                                        font-size: 0.7rem;
                                                    "
                                                @onclick="() => AgregarItem(id:item.idPruebaLab, nombrePrueba: item.nombrePrueba, precio:item.precio)"
                                                       type="button"
                                                       value="Quitar" />
                                            </td>
                                        </tr>
                                    }

                                    <tr class="ms-5">
                                        <th scope="row"></th>
                                        <td>
                                            <strong>TOTAL</strong>
                                        </td>
                                        <td>
                                            <strong class="text-success">$@Total</strong>
                                        </td>
                                    </tr>
                                </tbody>
                            }


                        </table>

                    </div>
                </div>
            </div>
        </div>



        <div class="col-sm-12 col-md-4 col-lg-4 col-xl-4 mt-3"
             style="border-radius: 10px; background-color:#162d43ff">
            <div>
                <div>
                    <h5 class="text-center text-uppercase text-white mt-2"
                        style="
                                    font-family: 'Courier New', Courier,
                                        monospace;
                                    font-weight: 600;
                                ">
                        Turnos Pendientes
                    </h5>
                </div>
                <!--Turnos pendientes-->

                <table class="table table-fixed mx-auto text-white" style=" display: block; height: 500px; overflow-y: auto; scrollbar-gutter: stable both-edges; background-color:#162d43ff;">
                    <thead>
                        <tr>
                            <th scope="col">Turno#</th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>

                        @if (TurnosPendientes != null && TurnosPendientes.Count > 0)
                        {
                            foreach (var item in TurnosPendientes)
                            {
                                <tr>
                                    <th scope="row">@item.idTurno</th>
                                    <td>
                                        <input class="btn btn-success btn-sm mx-1 mt-1"
                                               style="
                                                padding: 0.2rem 0.4rem;
                                                font-size: 0.7rem;
                                            "
                                               type="button"
                                               value="Atender"
                                        @onclick="() => AtenderTurno(item.idTurno)" />


                                        <input class="btn btn-primary btn-sm mx-1 mt-1"
                                               style="
                                                padding: 0.2rem 0.4rem;
                                                font-size: 0.7rem;
                                            "
                                               type="button"
                                               value="Ver"
                                        @onclick="() => CargarPruebasDelTurnoParaFacturar(item.pruebasLab, item.idTurno)" />

                                        <input class="btn btn-danger btn-sm mx-1 mt-1"
                                               style="
                                                padding: 0.2rem 0.4rem;
                                                font-size: 0.7rem;
                                            "
                                               type="button"
                                               value="Cancelar"
                                        @onclick="() => CancelarTurno(item.idTurno)" />
                                    </td>
                                </tr>
                            }

                        }
                        else
                        {
                            <tr>
                                <td>
                                    <button class="btn btn-primary" type="button" disabled>
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        Cargando...
                                    </button>
                                </td>
                            </tr>
                        }


                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


<style>
    .dropdown-menu {
        max-height: 125px;
        overflow-y: scroll;
    }</style>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

@code {
    List<Turno> TurnosPendientes = new();
    List<PruebaLab> PruebasLab = new();
    List<PruebaLab> PruebasSeleccionadas = new List<PruebaLab>();
    ReciboRequest cliente = new();
    string idTurnoSeleccionado;

    bool estaCargando = false;

    decimal? Total = 0.0m;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var pruebasLab = await pruebaLabService.ObtenerPruebas();

            if (pruebasLab != null)
            {
                PruebasLab = pruebasLab.ToList();
            }


            var turnosPendientes = await turnoService.GetTurnos();
            if (pruebasLab != null)
            {
                var listaVolteada = Enumerable.Reverse(turnosPendientes).ToList();
                TurnosPendientes = listaVolteada;
            }

        }
        catch (Exception ex)
        {

            await App.Current.MainPage.DisplayAlert("Oops", $"Ocurrio un error al cargar los datos de la api. ERRORCODE:{ex.Message}", "Ok");

        }

    }

    private async Task GenerarRecibo()
    {

        if (ValidarDatosCliente())
        {
            try
            {
                estaCargando = true;
                cliente.pruebas = PruebasSeleccionadas.Select(ps => new PruebaLab()
                    {
                        idPruebaLab = ps.idPruebaLab,
                        nombrePrueba = string.Empty,
                        precio = decimal.Zero
                    }).ToList();

                var confirmacion = await Swal.FireAsync(new SweetAlertOptions()
                    {
                        Title = "Confirma Generar Recibo",
                        Html = $"<strong>Seguro que quieres generar el recibo?</strong>",
                        Footer = """Confirmacion""",
                        Icon = SweetAlertIcon.Question,
                        ShowConfirmButton = true,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Generar",
                        ConfirmButtonColor = "green",
                        CancelButtonText = "Cancelar",
                        CancelButtonColor = "Red",
                        Timer = 10000
                    });

                if (confirmacion.IsConfirmed)
                {
                    var resultado = await reciboService.GenerarRecibo(cliente);


                    var alerta = await Swal.FireAsync(new SweetAlertOptions()
                        {
                            Title = "Facturacion Exitosa",
                            Color = "Darkblue",
                            Html = $"<strong>Total: {resultado.total}$</strong>",
                            Footer = """Imprimiendo Recibo""",
                            Icon = SweetAlertIcon.Success,
                            ShowConfirmButton = false,
                            Timer = 2500
                        });

                    estaCargando = false;
                    await LimpiarItems();
                }
                estaCargando = false;
            }
            catch (Exception ex)
            {
                await Swal.FireAsync(new SweetAlertOptions()
                    {
                        Title = "Error ",
                        Color = "DarkRed",
                        Html = $"<strong>Mensaje de error: {ex.Message}</strong>",
                        Toast = true,
                        Icon = SweetAlertIcon.Warning,
                        Timer = 2000
                    });
            }

        }



    }

    private bool ValidarDatosCliente()
    {

        if (PruebasSeleccionadas != null && PruebasSeleccionadas.Count < 1)
        {
            Swal.FireAsync(new SweetAlertOptions()
                {
                    Title = "Error ",
                    Color = "DarkRed",
                    Html = $"<strong>Debes seleccionar al menos un servicio a facturar</strong>",
                    Toast = true,
                    Icon = SweetAlertIcon.Warning,
                    Timer = 2000
                });
            return false;
        }
        else
        {
            return true;
        }
    }


    private void AgregarItem(int id, string nombrePrueba, decimal? precio)
    {

        if (true)
        {

        }
        PruebaLab item = PruebasSeleccionadas.FirstOrDefault(d => d.idPruebaLab == id);

        if (item == null)
        {
            PruebasSeleccionadas.Add(new()
                {
                    idPruebaLab = id,
                    nombrePrueba = nombrePrueba,
                    precio = precio
                });

        }
        else
        {
            QuitarItem(item);
        }

        Total = PruebasSeleccionadas.Select(ps => ps.precio).Sum();
    }

    private void QuitarItem(PruebaLab item)
    {
        PruebasSeleccionadas.Remove(item);
    }


    private Task LimpiarItems()
    {
        PruebasSeleccionadas = new();
        Total = 0.0m;
        cliente = new();
        idTurnoSeleccionado = null;


        return Task.CompletedTask;
    }

    private void CargarPruebasDelTurnoParaFacturar(List<PruebaLab> pruebas, string idTurno)
    {
        LimpiarItems();

        idTurnoSeleccionado = idTurno;

        var pruebasConPrecio = pruebas.Select(p => new PruebaLab()
            {
                idPruebaLab = p.idPruebaLab,
                nombrePrueba = p.nombrePrueba,
                precio = PruebasLab.Where(pl => pl.idPruebaLab == p.idPruebaLab).Select(pl => pl.precio).First()
            }).ToList();

        Total = pruebasConPrecio.Select(p => p.precio).Sum();

        PruebasSeleccionadas = pruebasConPrecio;

    }


    private async Task CancelarTurno(string id)
    {
        string resultado = await turnoService.CancelarTurno(id);

        if (resultado == "true")
        {
            await Swal.FireAsync(new SweetAlertOptions()
                {
                    Title = "Turno cancelado exitosamente",
                    Color = "DarkYellow",
                    Html = $"<strong>Turno numero: {id}</strong>",
                    Toast = true,
                    Icon = SweetAlertIcon.Success,
                    ShowConfirmButton = true,
                    Timer = 10000
                });

            var turnoParaQuitar = TurnosPendientes.FirstOrDefault(t => t.idTurno == id);
            TurnosPendientes.Remove(turnoParaQuitar);
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions()
                {
                    Title = "Error",
                    Html = $"<strong>{resultado}</strong>",
                    Icon = SweetAlertIcon.Error,
                    ShowConfirmButton = true,
                    Timer = 10000
                });
        }
    }

    private async Task AtenderTurno(string id)
    {
        string resultado = await turnoService.CancelarTurno(id);

        if (resultado == "true")
        {
            await Swal.FireAsync(new SweetAlertOptions()
                {
                    Title = "Turno atendido exitosamente",
                    Color = "DarkGreen",
                    Html = $"<strong>Turno numero: {id}</strong>",
                    Toast = true,
                    Icon = SweetAlertIcon.Success,
                    ShowConfirmButton = true,
                    Timer = 10000
                });

            var turnoParaQuitar = TurnosPendientes.FirstOrDefault(t => t.idTurno == id);
            TurnosPendientes.Remove(turnoParaQuitar);
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions()
                {
                    Title = "Error",
                    Html = $"<strong>{resultado}</strong>",
                    Icon = SweetAlertIcon.Error,
                    ShowConfirmButton = true,
                    Timer = 10000
                });
        }
    }


}
